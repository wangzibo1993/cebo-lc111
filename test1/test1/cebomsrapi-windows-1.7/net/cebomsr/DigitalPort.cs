/* 
  CESYS Software License - Version 1.0 - January 1st, 2016

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The software must only be used to operate hardware manufactured by 
  CESYS GmbH, Herzogenaurach.

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  
  Written by Thomas Hoppe <thomas.hoppe@cesys.com>, 2016
*/  

using System;
using System.Collections.Generic;
using System.Text;

namespace CeboMsrNet
{
    /// <summary>
    /// Offers functionality to work with digital ports. Direct construction
    /// is not possible. Instances can be retrieved from DigitalPorts of
    /// the respective Device instance.
    /// </summary>
    public sealed class DigitalPort : IInput, IOutput
    {
        private Device _device;
        private uint _interfaceId;
        private int _index;
        private string _name;
        private int _ioCount;
        private List<string> _ioNames = new List<string>();

        internal uint InterfaceId { get { return _interfaceId; } }
        internal int Index { get { return _index; } }

        internal DigitalPort(Device device, uint interfaceId, int index)
        {
            _device = device;
            _interfaceId = interfaceId;
            _index = index;
            _name = SystemConnector.GetPeripheralName(device.Handle, interfaceId);
            _ioCount = SystemConnector.GetDigitalPortIoCount(device.Handle, interfaceId);
            for (int i = 0; i < _ioCount; ++i)
                _ioNames.Add(SystemConnector.GetDigitalPortIoName(device.Handle, interfaceId, i));
        }

        /// <summary>
        /// Set output mask. The default mask is 0. Mask to use, bits that have state '1' specify output direction.
        /// </summary>
        public int OutputEnableMask
        {
            set { SystemConnector.SetDigitalPortOutputEnableMask(_device.Handle, _interfaceId, value); }
        }

        /// <summary>
        /// Count of I/O's for the specified port.
        /// </summary>
        public int IoCount { get { return _ioCount; } }

        /// <summary>
        /// Set output I/O's or read them. Only the bits that have been defined as output
        /// using OutputEnableMask are modified during write.
        /// </summary>
        public int Value
        {
            get { return SystemConnector.ReadDigitalPort(_device.Handle, _interfaceId); }
            set { SystemConnector.WriteDigitalPort(_device.Handle, _interfaceId, value); }
        }

        /// <summary>
        /// Name of the component.
        /// </summary>
        public string Name { get { return _name; } }

        /// <summary>
        /// Return name of the I/O as specified by io.
        /// </summary>
        /// <param name="io">I/O index in range (0 <= io < getIoCount()).</param>
        public string GetIoName(int io)
        {
            return _ioNames[io];
        }

        public override string ToString()
        {
            return "DigitalPort" + _index;
        }
    }
}
