/* 
  CESYS Software License - Version 1.0 - January 1st, 2016

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The software must only be used to operate hardware manufactured by 
  CESYS GmbH, Herzogenaurach.

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  
  Written by Thomas Hoppe <thomas.hoppe@cesys.com>, 2016
*/  

using System;
using System.Collections.Generic;
using System.Text;

namespace CeboMsrNet
{
    /// <summary>
    /// One or more instances of this interface are returned when reading one or multiple
    /// frames previously setup using Device.SetupInputFrame(). It allows
    /// simple access to all captured data.
    /// </summary>
    public sealed class InputFrame
    {
        private float[] _vvalues;
        private int[] _values;
        private int _singleEndedOffset, _singleEndedCount, _differentialOffset, _differentialCount;
        private int _digitalPortOffset, _digitalPortCount, _counterOffset, _counterCount, _triggerOffset, _triggerCount;

        internal InputFrame(
            float[] vvalues, int[] values,
            int singleEndedOffset, int singleEndedCount,
            int differentialOffset, int differentialCount,
            int digitalPortOffset, int digitalPortCount,
            int counterOffset, int counterCount,
            int triggerOffset, int triggerCount)
        {
            _vvalues = vvalues;
            _values = values;
            _singleEndedOffset = singleEndedOffset;
            _singleEndedCount = singleEndedCount;
            _differentialOffset = differentialOffset;
            _differentialCount = differentialCount;
            _digitalPortOffset = digitalPortOffset;
            _digitalPortCount = digitalPortCount;
            _counterOffset = counterOffset;
            _counterCount = counterCount;
            _triggerOffset = triggerOffset;
            _triggerCount = triggerCount;
        }

        /// <summary>
        /// Read value from single ended input with given index.
        /// </summary>
        /// <param name="index">Zero based index of single ended input in question.</param>
        /// <returns>Value of this input in voltage.</returns>
        public float GetSingleEnded(int index)
        {
            // Must be checked, as the arrays can span over multiple frames.
            if (index < 0 || index >= _singleEndedCount)
                throw new IndexOutOfRangeException();
            return _vvalues[_singleEndedOffset + index];
        }

        /// <summary>
        /// Read value from differential input with given index.
        /// </summary>
        /// <param name="index">Zero based index of differential input in question.</param>
        /// <returns>Value of this input in voltage.</returns>
        public float GetDifferential(int index)
        {
            // Must be checked, as the arrays can span over multiple frames.
            if (index < 0 || index >= _differentialCount)
                throw new IndexOutOfRangeException();
            return _vvalues[_differentialOffset + index];
        }

        /// <summary>
        /// Read value from digital port with given index.
        /// </summary>
        /// <param name="index">Zero based index of digital port in question.</param>
        /// <returns>Active mask of digital port.</returns>
        public int GetDigitalPort(int index)
        {
            // Must be checked, as the arrays can span over multiple frames.
            if (index < 0 || index >= _digitalPortCount)
                throw new IndexOutOfRangeException();
            return _values[_digitalPortOffset + index];
        }

        /// <summary>
        /// Read level from trigger with given index.
        /// </summary>
        /// <param name="index">Zero based index of trigger in question.</param>
        /// <returns>Current level of trigger, true equals a high level.</returns>
        public bool GetTrigger(int index)
        {
            if (index < 0 || index >= _triggerCount)
                throw new IndexOutOfRangeException();
            return 0 != _values[_triggerOffset + index];
        }

        /// <summary>
        /// Read value of specified counter.
        /// </summary>
        /// <param name="index">Zero based index of counter in question.</param>
        /// <returns>Current counter value.</returns>
        public long GetCounter(int index)
        {
            if (index < 0 || index >= _counterCount)
                throw new IndexOutOfRangeException();
            return (uint)_values[_counterOffset + index];
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("InputFrame: \n");
            for (int i = 0; i < _singleEndedCount; ++i)
                sb.Append(string.Format("SingleEnded #{0} = {1:0.00} V\n", i, GetSingleEnded(i)));
            for (int i = 0; i < _differentialCount; ++i)
                sb.Append(string.Format("Differential #{0} = {1:0.00} V\n", i, GetDifferential(i)));
            for (int i = 0; i < _digitalPortCount; ++i)
                sb.Append(string.Format("DigitalPort #{0} = {1} (0x{1:x8})\n", i, GetDigitalPort(i)));
            for (int i = 0; i < _counterCount; ++i)
                sb.Append(string.Format("Counter #{0} = {1} (0x{1:x8})\n", i, GetCounter(i)));
            for (int i = 0; i < _triggerCount; ++i)
                sb.Append(string.Format("Trigger #{0} = {1}\n", i, GetTrigger(i) ? "high" : "low"));
            return sb.ToString();
        }
    }
}
