/* 
  CESYS Software License - Version 1.0 - January 1st, 2016

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The software must only be used to operate hardware manufactured by 
  CESYS GmbH, Herzogenaurach.

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  
  Written by Thomas Hoppe <thomas.hoppe@cesys.com>, 2016
*/  

using System;
using System.Collections.Generic;
using System.Text;

namespace CeboMsrNet
{
    /// <summary>
    /// These objects are used to set the range of analog inputs and outputs.
    /// Direct construction is not possible, SupportedRanges of AnalogInput and
    /// AnalogOutput can be used to request the possible ranges of an input or output.
    /// </summary>
    public sealed class Range
    {
        private uint _interfaceId;
        private float _minValue, _maxValue;
        private int _defaultInterChannelDelay;

        internal uint InterfaceId { get { return _interfaceId; } }
        internal int DefaultInterChannelDelay { get { return _defaultInterChannelDelay; } }

        internal Range(uint interfaceId, float minValue, float maxValue, int defaultInterChannelDelay)
        {
            _interfaceId = interfaceId;
            _minValue = minValue;
            _maxValue = maxValue;
            _defaultInterChannelDelay = defaultInterChannelDelay;
        }

        /// <summary>
        /// Lower voltage.
        /// </summary>
        public float MinValue { get { return _minValue; } }

        /// <summary>
        /// Upper voltage.
        /// </summary>
        public float MaxValue { get { return _maxValue; } }

        public override string ToString()
        {
            return "Range: " + _minValue + "V - " + _maxValue + "V";
        }
    }
}
