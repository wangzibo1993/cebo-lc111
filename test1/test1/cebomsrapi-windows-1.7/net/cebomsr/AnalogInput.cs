/* 
  CESYS Software License - Version 1.0 - January 1st, 2016

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The software must only be used to operate hardware manufactured by 
  CESYS GmbH, Herzogenaurach.

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  
  Written by Thomas Hoppe <thomas.hoppe@cesys.com>, 2016
*/  

using System;
using System.Collections.Generic;
using System.Text;

namespace CeboMsrNet
{
    /// <summary>
    /// Offers functionality of the different kind of analog inputs.
    /// Direct construction is not possible, instances can be retrieved from
    /// SingleEndedInputs or DifferentialInputs of the respective instance
    /// of class Device.
    /// </summary>
    public sealed class AnalogInput : IInput
    {
        internal enum Styles { SingleEnded, Differential };

        private List<Range> _supportedRanges = new List<Range>();
        private Device _device;
        private uint _interfaceId;
        private Styles _style;
        private int _index;
        private int _minInterChannelDelay;
        private string _name;

        internal uint InterfaceId { get { return _interfaceId; } }
        internal Styles Style { get { return _style; } }
        internal int Index { get { return _index; } }

        internal AnalogInput(Device device, uint interfaceId, Styles style, int index)
        {
            _device = device;
            _interfaceId = interfaceId;
            _style = style;
            _index = index;
            _name = SystemConnector.GetPeripheralName(device.Handle, interfaceId);
            for (int i = 0;; ++i) 
            {
                uint rangeId = SystemConnector.EnumerateRanges(device.Handle, interfaceId, i);
                if (rangeId == SystemConnector.CeboMsrRangeInvalid)
                    break;

                IList<float> minMax = SystemConnector.GetRangeMinMax(device.Handle, interfaceId, rangeId);
                _supportedRanges.Add(new Range(rangeId, minMax[0], minMax[1],
                    SystemConnector.GetDefaultAnalogInputInterChannelDelay(device.Handle, interfaceId, rangeId)));
            }
            _minInterChannelDelay = SystemConnector.GetMinAnalogInputInterChannelDelay(device.Handle, interfaceId);
        }

        /// <summary>
        /// List of the supported ranges.
        /// </summary>
        public IList<Range> SupportedRanges { get { return _supportedRanges.AsReadOnly(); } }

        /// <summary>
        /// Request default interchannel delay at the given range setting.
        /// </summary>
        /// <param name="range">Range for which this value is requested.</param>
        public int GetDefaultInterChannelDelay(Range range)
        {
            return range.DefaultInterChannelDelay;
        }

        /// <summary>
        /// Minimum interchannel delay.
        /// </summary>
        public int MinInterChannelDelay { get { return _minInterChannelDelay; } }

        /// <summary>
        /// Set new range, interchannel delay is set to the default for this range.
        /// </summary>
        /// <param name="range">Range level to set.</param>
        public void SetParameters(Range range)
        {
            SystemConnector.SetAnalogInputParameters(_device.Handle, _interfaceId, range.InterfaceId, -1);
        }

        /// <summary>
        /// Set range and user specified interchannel delay.
        /// </summary>
        /// <param name="range">Range level to set.</param>
        /// <param name="interChannelDelay">Interchannel delay in microseconds.</param>
        /// <returns>Corrected interchannel delay in microseconds.</returns>
        public int SetParameters(Range range, int interChannelDelay)
        {
            return SystemConnector.SetAnalogInputParameters(_device.Handle, _interfaceId, range.InterfaceId, interChannelDelay);
        }

        /// <summary>
        /// Define (identical to SetParameters(Range)) or read active range setting.
        /// </summary>
        public Range Range
        {
            get 
            { 
                int dummy = 0; 
                uint rangeId = SystemConnector.GetAnalogInputParameters(_device.Handle, _interfaceId, ref dummy);
                return _supportedRanges.Find(r => r.InterfaceId == rangeId);
            }
            set { SetParameters(value); }
        }

        /// <summary>
        /// Active interchannel delay.
        /// </summary>
        public int InterChannelDelay
        {
            get { int icd = 0; SystemConnector.GetAnalogInputParameters(_device.Handle, _interfaceId, ref icd); return icd; }
        }

        /// <summary>
        /// Read current voltage value.
        /// </summary>
        public float Value { get { return SystemConnector.ReadAnalogInput(_device.Handle, _interfaceId); } }

        /// <summary>
        /// Name of the component.
        /// </summary>
        public string Name { get { return _name; } }

        public override string ToString()
        {
            return _style == Styles.Differential ? ("Differential" + _index) : ("SingleEnded" + _index);
        }
    }
}
