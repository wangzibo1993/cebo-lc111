/* 
  CESYS Software License - Version 1.0 - January 1st, 2016

  Permission is hereby granted, free of charge, to any person or organization
  obtaining a copy of the software and accompanying documentation covered by
  this license (the "Software") to use, reproduce, display, distribute,
  execute, and transmit the Software, and to prepare derivative works of the
  Software, and to permit third-parties to whom the Software is furnished to
  do so, all subject to the following:

  The software must only be used to operate hardware manufactured by 
  CESYS GmbH, Herzogenaurach.

  The copyright notices in the Software and this entire statement, including
  the above license grant, this restriction and the following disclaimer,
  must be included in all copies of the Software, in whole or in part, and
  all derivative works of the Software, unless such copies or derivative
  works are solely in the form of machine-executable object code generated by
  a source language processor.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  
  Written by Thomas Hoppe <thomas.hoppe@cesys.com>, 2016
*/  

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;
using System.IO;

namespace CeboMsrNet
{
    /// <summary>
    /// Direct access to the CeboMsr-Base-API. Internal use only.
    /// </summary>
    internal static class SystemConnector
    {
        private const string DLLx86 = "cebomsr-1.7-x86.dll";        
        private const string DLLx64 = "cebomsr-1.7-x86_64.dll";

        internal const uint CeboMsrTypeAll = 0xceb00000;
        internal const uint CeboMsrTypeUsb = 0xceb00001;
        internal const uint CeboMsrTypeCeboLC = 0xceb00010;
        internal const uint CeboMsrTypeCeboStick = 0xceb00011;

        internal const int MaxIdentLength = 1024;

        internal const uint CeboParameterSingleEndedCount = 0;
        internal const uint CeboParameterDifferentialCount = 1;
        internal const uint CeboParameterAnalogOutputCount = 2;
        internal const uint CeboParameterDigitalPortCount = 3;
        internal const uint CeboParameterCounterCount = 4;
        internal const uint CeboParameterTriggerCount = 5;
        internal const uint CeboParameterMaxInputFrames = 6;
        internal const uint CeboParameterCurrentSourceCount = 7;
        internal const uint CeboParameterLedCount = 8;

        internal const uint CeboMsrIoIdDigitalPort0 = 0xceb01000;
        internal const uint CeboMsrIoIdDigitalPort1 = 0xceb01001;
        internal const uint CeboMsrIoIdDigitalPort2 = 0xceb01002;
        internal const uint CeboMsrIoIdDigitalPort3 = 0xceb01003;
        internal const uint CeboMsrIoIdDigitalPort4 = 0xceb01004;
        internal const uint CeboMsrIoIdDigitalPort5 = 0xceb01005;
        internal const uint CeboMsrIoIdDigitalPort6 = 0xceb01006;
        internal const uint CeboMsrIoIdDigitalPort7 = 0xceb01007;

        internal const uint CeboMsrIoIdSingleEnded0 = 0xceb01100;
        internal const uint CeboMsrIoIdSingleEnded1 = 0xceb01101;
        internal const uint CeboMsrIoIdSingleEnded2 = 0xceb01102;
        internal const uint CeboMsrIoIdSingleEnded3 = 0xceb01103;
        internal const uint CeboMsrIoIdSingleEnded4 = 0xceb01104;
        internal const uint CeboMsrIoIdSingleEnded5 = 0xceb01105;
        internal const uint CeboMsrIoIdSingleEnded6 = 0xceb01106;
        internal const uint CeboMsrIoIdSingleEnded7 = 0xceb01107;
        internal const uint CeboMsrIoIdSingleEnded8 = 0xceb01108;
        internal const uint CeboMsrIoIdSingleEnded9 = 0xceb01109;
        internal const uint CeboMsrIoIdSingleEnded10 = 0xceb0110a;
        internal const uint CeboMsrIoIdSingleEnded11 = 0xceb0110b;
        internal const uint CeboMsrIoIdSingleEnded12 = 0xceb0110c;
        internal const uint CeboMsrIoIdSingleEnded13 = 0xceb0110d;
        internal const uint CeboMsrIoIdSingleEnded14 = 0xceb0110e;
        internal const uint CeboMsrIoIdSingleEnded15 = 0xceb0110f;

        internal const uint CeboMsrIoIdDifferential0 = 0xceb01200;
        internal const uint CeboMsrIoIdDifferential1 = 0xceb01201;
        internal const uint CeboMsrIoIdDifferential2 = 0xceb01202;
        internal const uint CeboMsrIoIdDifferential3 = 0xceb01203;
        internal const uint CeboMsrIoIdDifferential4 = 0xceb01204;
        internal const uint CeboMsrIoIdDifferential5 = 0xceb01205;
        internal const uint CeboMsrIoIdDifferential6 = 0xceb01206;
        internal const uint CeboMsrIoIdDifferential7 = 0xceb01207;

        internal const uint CeboMsrIoIdAnalogOutput0 = 0xceb01300;
        internal const uint CeboMsrIoIdAnalogOutput1 = 0xceb01301;

        internal const uint CeboMsrRange0 = 0xceb01400;
        internal const uint CeboMsrRange1 = 0xceb01401;
        internal const uint CeboMsrRange2 = 0xceb01402;
        internal const uint CeboMsrRange3 = 0xceb01403;
        internal const uint CeboMsrRangeInvalid = 0xceb014ff;

        internal const uint CeboMsrIoIdCounter0 = 0xceb01500;

        internal const uint CeboMsrIoIdTrigger0 = 0xceb01600;

        internal const uint CeboMsrCurrentSource0 = 0xceb01700;
        internal const uint CeboMsrCurrentSource1 = 0xceb01701;

        internal const uint CeboMsrLedIndicator = 0xceb01800;

        internal const int CeboMsrPeripheralResetMaskInputFifo = 0x00000001;

        internal const uint CeboMsrTriggerOutputPulse = 0xceb01900;
        internal const uint CeboMsrTriggerOutputAlternating = 0xceb01901;
        internal const uint CeboMsrTriggerInputRisingEdge = 0xceb01902;
        internal const uint CeboMsrTriggerInputFallingEdge = 0xceb01903;
        internal const uint CeboMsrTriggerInputAlternating = 0xceb01904;

        internal const uint CeboMsrCounterConfigRisingEdge = 0xceb01a00;
        internal const uint CeboMsrCounterConfigFallingEdge = 0xceb01a01;
        internal const uint CeboMsrCounterConfigAlternating = 0xceb01a02;

        private static void CheckError(uint errorCode)
        {
            if (0 != errorCode)
            {
                // This is an error, get size of buffer for error string.
                int len = Is64 ? CeboMsrGetErrorLength64(errorCode) : CeboMsrGetErrorLength86(errorCode);

                // Retrieve error string.
                StringBuilder sb = new StringBuilder(len - 1);
                if (Is64)
                    CeboMsrGetError64(errorCode, sb);
                else
                    CeboMsrGetError86(errorCode, sb);

                String error = sb.ToString();

                uint errorClass = errorCode >> 24;

                switch (errorClass)
                {
                    case 0x80: throw new ArgumentException(error);
                    case 0x40: throw new IndexOutOfRangeException(error);
                    case 0x20: throw new InvalidOperationException(error);
                    case 0x10: throw new IOException(error);
                }

                // Throw exception with string.
                throw new ApplicationException("(internal) Unhandled error: " + error);
            }
        }

        private static bool Is64
        {
            get { return IntPtr.Size == 8; }
        }

        /// Error handling.
        [DllImport(DLLx86, EntryPoint = "CeboMsrGetErrorLength", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern int CeboMsrGetErrorLength86(uint index);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetErrorLength", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern int CeboMsrGetErrorLength64(uint index);

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetError", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern void CeboMsrGetError86(uint index, StringBuilder sb);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetError", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern void CeboMsrGetError64(uint index, StringBuilder sb);

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetApiVersion", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetApiVersion86(StringBuilder version);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetApiVersion", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetApiVersion64(StringBuilder version);
        internal static string GetApiVersion()
        {
            StringBuilder sb = new StringBuilder(MaxIdentLength);
            if (Is64)
                CheckError(CeboMsrGetApiVersion64(sb));
            else
                CheckError(CeboMsrGetApiVersion86(sb));
            return sb.ToString();
        }

        /// Enumeration.
        [DllImport(DLLx86, EntryPoint = "CeboMsrBeginEnumerate", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrBeginEnumerate86(ref int count, uint msrType);
        [DllImport(DLLx64, EntryPoint = "CeboMsrBeginEnumerate", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrBeginEnumerate64(ref int count, uint msrType);
        internal static int BeginEnumerate(uint msrType)
        {
            int r = 0;
            if (Is64)
                CheckError(CeboMsrBeginEnumerate64(ref r, msrType));
            else
                CheckError(CeboMsrBeginEnumerate86(ref r, msrType));
            return r;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrBeginEnumerateNetwork", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrBeginEnumerateNetwork86(string hostname, int port, ref int count, uint msrType);
        [DllImport(DLLx64, EntryPoint = "CeboMsrBeginEnumerateNetwork", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrBeginEnumerateNetwork64(string hostname, int port, ref int count, uint msrType);
        internal static int BeginEnumerateNetwork(string hostname, int port, uint msrType)
        {
            int r = 0;
            if (Is64)
                CheckError(CeboMsrBeginEnumerateNetwork64(hostname, port, ref r, msrType));
            else
                CheckError(CeboMsrBeginEnumerateNetwork86(hostname, port, ref r, msrType));
            return r;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetIdentifier", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetIdentifier86(int id, StringBuilder ident, ref uint msrType, StringBuilder version);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetIdentifier", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetIdentifier64(int id, StringBuilder ident, ref uint msrType, StringBuilder version);
        internal static string GetIdentifier(int id, ref uint msrType, ref string version)
        {
            StringBuilder r = new StringBuilder(MaxIdentLength);
            StringBuilder v = new StringBuilder(MaxIdentLength);
            if (Is64)
                CheckError(CeboMsrGetIdentifier64(id, r, ref msrType, v));
            else
                CheckError(CeboMsrGetIdentifier86(id, r, ref msrType, v));
            version = v.ToString();
            return r.ToString();
        }

        /// Access.
        [DllImport(DLLx86, EntryPoint = "CeboMsrOpen", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrOpen86(string ident, ref uint handle);
        [DllImport(DLLx64, EntryPoint = "CeboMsrOpen", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrOpen64(string ident, ref uint handle);
        internal static uint Open(string ident)
        {
            uint handle = 0;
            if (Is64)
                CheckError(CeboMsrOpen64(ident, ref handle));
            else
                CheckError(CeboMsrOpen86(ident, ref handle));
            return handle;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrClose", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrClose86(uint handle);
        [DllImport(DLLx64, EntryPoint = "CeboMsrClose", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrClose64(uint handle);
        internal static void Close(uint handle)
        {
            if (Is64)
                CheckError(CeboMsrClose64(handle));
            else
                CheckError(CeboMsrClose86(handle));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrResetDevice", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetDevice86(uint handle);
        [DllImport(DLLx64, EntryPoint = "CeboMsrResetDevice", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetDevice64(uint handle);
        internal static void ResetDevice(uint handle)
        {
            if (Is64)
                CheckError(CeboMsrResetDevice64(handle));
            else
                CheckError(CeboMsrResetDevice86(handle));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrResetPeripherals", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetPeripherals86(uint handle, int mask);
        [DllImport(DLLx64, EntryPoint = "CeboMsrResetPeripherals", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetPeripherals64(uint handle, int mask);
        internal static void ResetPeripherals(uint handle, int mask)
        {
            if (Is64)
                CheckError(CeboMsrResetPeripherals64(handle, mask));
            else
                CheckError(CeboMsrResetPeripherals86(handle, mask));
        }

        /// Box specific.
        [DllImport(DLLx86, EntryPoint = "CeboMsrGetDeviceParameter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDeviceParameter86(uint handle, uint id, ref int value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetDeviceParameter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDeviceParameter64(uint handle, uint id, ref int value);
        internal static int GetDeviceParameter(uint handle, uint id)
        {
            int value = 0;
            if (Is64)
                CheckError(CeboMsrGetDeviceParameter64(handle, id, ref value));
            else
                CheckError(CeboMsrGetDeviceParameter86(handle, id, ref value));
            return value;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetDigitalPortIoCount", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDigitalPortIoCount86(uint handle, uint ioId, ref int value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetDigitalPortIoCount", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDigitalPortIoCount64(uint handle, uint ioId, ref int value);
        internal static int GetDigitalPortIoCount(uint handle, uint ioId)
        {
            int value = 0;
            if (Is64)
                CheckError(CeboMsrGetDigitalPortIoCount64(handle, ioId, ref value));
            else
                CheckError(CeboMsrGetDigitalPortIoCount86(handle, ioId, ref value));
            return value;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetPeripheralName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetPeripheralName86(uint handle, uint ioId, StringBuilder sb);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetPeripheralName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetPeripheralName64(uint handle, uint ioId, StringBuilder sb);
        internal static string GetPeripheralName(uint handle, uint ioId)
        {
            StringBuilder sb = new StringBuilder(MaxIdentLength);
            if (Is64)
                CheckError(CeboMsrGetPeripheralName64(handle, ioId, sb));
            else
                CheckError(CeboMsrGetPeripheralName86(handle, ioId, sb));
            return sb.ToString();
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetDigitalPortIoName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDigitalPortIoName86(uint handle, uint ioId, int io, StringBuilder sb);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetDigitalPortIoName", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDigitalPortIoName64(uint handle, uint ioId, int io, StringBuilder sb);
        internal static string GetDigitalPortIoName(uint handle, uint ioId, int io)
        {
            StringBuilder sb = new StringBuilder(MaxIdentLength);
            if (Is64)
                CheckError(CeboMsrGetDigitalPortIoName64(handle, ioId, io, sb));
            else
                CheckError(CeboMsrGetDigitalPortIoName86(handle, ioId, io, sb));
            return sb.ToString();
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrEnumerateRanges", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrEnumerateRanges86(uint handle, uint ioId, int id, ref uint rangeId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrEnumerateRanges", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrEnumerateRanges64(uint handle, uint ioId, int id, ref uint rangeId);
        internal static uint EnumerateRanges(uint handle, uint ioId, int id)
        {
            uint rangeId = 0;
            if (Is64)
                CheckError(CeboMsrEnumerateRanges64(handle, ioId, id, ref rangeId));
            else
                CheckError(CeboMsrEnumerateRanges86(handle, ioId, id, ref rangeId));
            return rangeId;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetRangeMinMax", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetRangeMinMax86(uint handle, uint ioId, uint rangeid, ref float minValue, ref float maxValue);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetRangeMinMax", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetRangeMinMax64(uint handle, uint ioId, uint rangeid, ref float minValue, ref float maxValue);
        internal static IList<float> GetRangeMinMax(uint handle, uint ioId, uint rangeId)
        {
            float minValue = 0, maxValue = 0;
            if (Is64)
                CheckError(CeboMsrGetRangeMinMax64(handle, ioId, rangeId, ref minValue, ref maxValue));
            else
                CheckError(CeboMsrGetRangeMinMax86(handle, ioId, rangeId, ref minValue, ref maxValue));
            return new[] { minValue, maxValue };
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetDefaultAnalogInputInterChannelDelay", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDefaultAnalogInputInterChannelDelay86(uint handle, uint ioId, uint rangeid, ref int icd);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetDefaultAnalogInputInterChannelDelay", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetDefaultAnalogInputInterChannelDelay64(uint handle, uint ioId, uint rangeid, ref int icd);
        internal static int GetDefaultAnalogInputInterChannelDelay(uint handle, uint ioId, uint rangeId)
        {
            int icd = 0;
            if (Is64)
                CheckError(CeboMsrGetDefaultAnalogInputInterChannelDelay64(handle, ioId, rangeId, ref icd));
            else
                CheckError(CeboMsrGetDefaultAnalogInputInterChannelDelay86(handle, ioId, rangeId, ref icd));
            return icd;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetMinAnalogInputInterChannelDelay", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetMinAnalogInputInterChannelDelay86(uint handle, uint ioId, ref int icd);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetMinAnalogInputInterChannelDelay", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetMinAnalogInputInterChannelDelay64(uint handle, uint ioId, ref int icd);
        internal static int GetMinAnalogInputInterChannelDelay(uint handle, uint ioId)
        {
            int icd = 0;
            if (Is64)
                CheckError(CeboMsrGetMinAnalogInputInterChannelDelay64(handle, ioId, ref icd));
            else
                CheckError(CeboMsrGetMinAnalogInputInterChannelDelay86(handle, ioId, ref icd));
            return icd;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetSerialNumber", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetSerialNumber86(uint handle, StringBuilder sb);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetSerialNumber", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetSerialNumber64(uint handle, StringBuilder sb);
        internal static string GetSerialNumber(uint handle)
        {
            StringBuilder sb = new StringBuilder(MaxIdentLength);
            if (Is64)
                CheckError(CeboMsrGetSerialNumber64(handle, sb));
            else
                CheckError(CeboMsrGetSerialNumber86(handle, sb));
            return sb.ToString();
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetTemperature", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTemperature86(uint handle, ref float temp);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetTemperature", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTemperature64(uint handle, ref float temp);
        internal static float GetTemperature(uint handle)
        {
            float temp = 0;
            if (Is64)
                CheckError(CeboMsrGetTemperature64(handle, ref temp));
            else
                CheckError(CeboMsrGetTemperature86(handle, ref temp));
            return temp;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetLed", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetLed86(uint handle, uint ioId, int state);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetLed", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetLed64(uint handle, uint ioId, int state);
        internal static void SetLed(uint handle, uint ioId, bool state)
        {
            if (Is64)
                CheckError(CeboMsrSetLed64(handle, ioId, state ? 1 : 0));
            else
                CheckError(CeboMsrSetLed86(handle, ioId, state ? 1 : 0));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetReferenceCurrent", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetReferenceCurrent86(uint handle, uint ioId, ref float current);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetReferenceCurrent", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetReferenceCurrent64(uint handle, uint ioId, ref float current);
        internal static float GetReferenceCurrent(uint handle, uint ioId)
        {
            float current = 0;
            if (Is64)
                CheckError(CeboMsrGetReferenceCurrent64(handle, ioId, ref current));
            else
                CheckError(CeboMsrGetReferenceCurrent86(handle, ioId, ref current));
            return current;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetWatchdogTimeout", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetWatchdogTimeout86(uint handle, uint timeout250mst);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetWatchdogTimeout", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetWatchdogTimeout64(uint handle, uint timeout250ms);
        internal static void SetWatchdogTimeout(uint handle, uint timeout250ms)
        {
            if (Is64)
                CheckError(CeboMsrSetWatchdogTimeout64(handle, timeout250ms));
            else
                CheckError(CeboMsrSetWatchdogTimeout86(handle, timeout250ms));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetWatchdogTimeout", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetWatchdogTimeout86(uint handle, ref uint timeout250ms);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetWatchdogTimeout", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetWatchdogTimeout64(uint handle, ref uint timeout250ms);
        internal static uint GetWatchdogTimeout(uint handle)
        {
            uint to = 0;
            if (Is64)
                CheckError(CeboMsrGetWatchdogTimeout64(handle, ref to));
            else
                CheckError(CeboMsrGetWatchdogTimeout86(handle, ref to));
            return to;
        }

        /// IO specific.
        [DllImport(DLLx86, EntryPoint = "CeboMsrSetDigitalPortOutputEnableMask", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetDigitalPortOutputEnableMask86(uint handle, uint ioId, int mask);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetDigitalPortOutputEnableMask", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetDigitalPortOutputEnableMask64(uint handle, uint ioId, int mask);
        internal static void SetDigitalPortOutputEnableMask(uint handle, uint ioId, int mask)
        {
            if (Is64)
                CheckError(CeboMsrSetDigitalPortOutputEnableMask64(handle, ioId, mask));
            else
                CheckError(CeboMsrSetDigitalPortOutputEnableMask86(handle, ioId, mask));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetAnalogInputParameters", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetAnalogInputParameters86(uint handle, uint ioId, uint rangeId, int icd, ref int cicd);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetAnalogInputParameters", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetAnalogInputParameters64(uint handle, uint ioId, uint rangeId, int icd, ref int cicd);
        internal static int SetAnalogInputParameters(uint handle, uint ioId, uint rangeId, int interChannelDelay)
        {
            int correctedInterChannelDelay = 0;
            if (Is64)
                CheckError(CeboMsrSetAnalogInputParameters64(handle, ioId, rangeId, interChannelDelay, ref correctedInterChannelDelay));
            else
                CheckError(CeboMsrSetAnalogInputParameters86(handle, ioId, rangeId, interChannelDelay, ref correctedInterChannelDelay));
            return correctedInterChannelDelay;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetAnalogInputParameters", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetAnalogInputParameters86(uint handle, uint ioId, ref uint rangeId, ref int icd);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetAnalogInputParameters", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetAnalogInputParameters64(uint handle, uint ioId, ref uint rangeId, ref int icd);
        internal static uint GetAnalogInputParameters(uint handle, uint ioId, ref int interChannelDelay)
        {
            uint rangeId = 0;
            if (Is64)
                CheckError(CeboMsrGetAnalogInputParameters64(handle, ioId, ref rangeId, ref interChannelDelay));
            else
                CheckError(CeboMsrGetAnalogInputParameters86(handle, ioId, ref rangeId, ref interChannelDelay));
            return rangeId;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetTriggerEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetTriggerEnable86(uint handle, uint ioId, int enabled);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetTriggerEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetTriggerEnable64(uint handle, uint ioId, int enabled);
        internal static void SetTriggerEnable(uint handle, uint ioId, bool state)
        {
            if (Is64)
                CheckError(CeboMsrSetTriggerEnable64(handle, ioId, state ? 1 : 0));
            else
                CheckError(CeboMsrSetTriggerEnable86(handle, ioId, state ? 1 : 0));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetTriggerEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTriggerEnable86(uint handle, uint ioId, ref int enabled);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetTriggerEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTriggerEnable64(uint handle, uint ioId, ref int enabled);
        internal static bool GetTriggerEnable(uint handle, uint ioId)
        {
            int state = 0;
            if (Is64)
                CheckError(CeboMsrGetTriggerEnable64(handle, ioId, ref state));
            else
                CheckError(CeboMsrGetTriggerEnable86(handle, ioId, ref state));
            return state == 1;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetTriggerConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetTriggerConfig86(uint handle, uint ioId, uint triggerConfigId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetTriggerConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetTriggerConfig64(uint handle, uint ioId, uint triggerConfigId);
        internal static void SetTriggerConfig(uint handle, uint ioId, uint triggerConfigId)
        {
            if (Is64)
                CheckError(CeboMsrSetTriggerConfig64(handle, ioId, triggerConfigId));
            else
                CheckError(CeboMsrSetTriggerConfig86(handle, ioId, triggerConfigId));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetTriggerConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTriggerConfig86(uint handle, uint ioId, ref uint triggerConfigId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetTriggerConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetTriggerConfig64(uint handle, uint ioId, ref uint triggerConfigId);
        internal static uint GetTriggerConfig(uint handle, uint ioId)
        {
            uint triggerConfigId = 0;
            if (Is64)
                CheckError(CeboMsrGetTriggerConfig64(handle, ioId, ref triggerConfigId));
            else
                CheckError(CeboMsrGetTriggerConfig86(handle, ioId, ref triggerConfigId));
            return triggerConfigId;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrResetCounter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetCounter86(uint handle, uint ioId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrResetCounter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrResetCounter64(uint handle, uint ioId);
        internal static void ResetCounter(uint handle, uint ioId)
        {
            if (Is64)
                CheckError(CeboMsrResetCounter64(handle, ioId));
            else
                CheckError(CeboMsrResetCounter86(handle, ioId));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetCounterEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetCounterEnable86(uint handle, uint ioId, int enabled);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetCounterEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetCounterEnable64(uint handle, uint ioId, int enabled);
        internal static void SetCounterEnable(uint handle, uint ioId, bool state)
        {
            if (Is64)
                CheckError(CeboMsrSetCounterEnable64(handle, ioId, state ? 1 : 0));
            else
                CheckError(CeboMsrSetCounterEnable86(handle, ioId, state ? 1 : 0));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetCounterEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetCounterEnable86(uint handle, uint ioId, ref int enabled);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetCounterEnable", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetCounterEnable64(uint handle, uint ioId, ref int enabled);
        internal static bool GetCounterEnable(uint handle, uint ioId)
        {
            int state = 0;
            if (Is64)
                CheckError(CeboMsrGetCounterEnable64(handle, ioId, ref state));
            else
                CheckError(CeboMsrGetCounterEnable86(handle, ioId, ref state));
            return state == 1;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetCounterConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetCounterConfig86(uint handle, uint ioId, uint triggerConfigId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetCounterConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetCounterConfig64(uint handle, uint ioId, uint triggerConfigId);
        internal static void SetCounterConfig(uint handle, uint ioId, uint counterConfigId)
        {
            if (Is64)
                CheckError(CeboMsrSetCounterConfig64(handle, ioId, counterConfigId));
            else
                CheckError(CeboMsrSetCounterConfig86(handle, ioId, counterConfigId));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrGetCounterConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetCounterConfig86(uint handle, uint ioId, ref uint triggerConfigId);
        [DllImport(DLLx64, EntryPoint = "CeboMsrGetCounterConfig", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrGetCounterConfig64(uint handle, uint ioId, ref uint triggerConfigId);
        internal static uint GetCounterConfig(uint handle, uint ioId)
        {
            uint counterConfigId = 0;
            if (Is64)
                CheckError(CeboMsrGetTriggerConfig64(handle, ioId, ref counterConfigId));
            else
                CheckError(CeboMsrGetTriggerConfig86(handle, ioId, ref counterConfigId));
            return counterConfigId;
        }

        /// Input specific.
        [DllImport(DLLx86, EntryPoint = "CeboMsrCalculateMaxBufferedInputFrames", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrCalculateMaxBufferedInputFrames86(uint handle, ref int frames);
        [DllImport(DLLx64, EntryPoint = "CeboMsrCalculateMaxBufferedInputFrames", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrCalculateMaxBufferedInputFrames64(uint handle, ref int frames);
        internal static int CalculateMaxBufferedInputFrames(uint handle)
        {
            int frames = 0;
            if (Is64)
                CheckError(CeboMsrCalculateMaxBufferedInputFrames64(handle, ref frames));
            else
                CheckError(CeboMsrCalculateMaxBufferedInputFrames86(handle, ref frames));
            return frames;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrSetupInputFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetupInputFrame86(uint handle, uint[] ios, int count);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetupInputFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetupInputFrame64(uint handle, uint[] ios, int count);
        internal static void SetupInputFrame(uint handle, uint[] ios)
        {
            if (Is64)
                CheckError(CeboMsrSetupInputFrame64(handle, ios, ios.Length));
            else
                CheckError(CeboMsrSetupInputFrame86(handle, ios, ios.Length));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrStartDataAcquisition", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrStartDataAcquisition86(uint handle, int externalStarted, float frameRate, int frameCount, ref float cfr);
        [DllImport(DLLx64, EntryPoint = "CeboMsrStartDataAcquisition", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrStartDataAcquisition64(uint handle, int externalStarted, float frameRate, int frameCount, ref float cfr);
        internal static float StartDataAcquisition(uint handle, bool externalStarted, float frameRate, int frameCount)
        {
            float cfr = 0;
            if (Is64)
                CheckError(CeboMsrStartDataAcquisition64(handle, externalStarted ? 1 : 0, frameRate, frameCount, ref cfr));
            else
                CheckError(CeboMsrStartDataAcquisition86(handle, externalStarted ? 1 : 0, frameRate, frameCount, ref cfr));
            return cfr;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrStopDataAcquisition", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrStopDataAcquisition86(uint handle);
        [DllImport(DLLx64, EntryPoint = "CeboMsrStopDataAcquisition", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrStopDataAcquisition64(uint handle);
        internal static void StopDataAcquisition(uint handle)
        {
            if (Is64)
                CheckError(CeboMsrStopDataAcquisition64(handle));
            else
                CheckError(CeboMsrStopDataAcquisition86(handle));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadBlocking", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadBlocking86(uint handle, float[] vbuffer, int[] buffer, int frameCount);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadBlocking", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadBlocking64(uint handle, float[] vbuffer, int[] buffer, int frameCount);
        internal static void ReadBlocking(uint handle, float[] vbuffer, int[] buffer, int frameCount)
        {
            if (Is64)
                CheckError(CeboMsrReadBlocking64(handle, vbuffer, buffer, frameCount));
            else
                CheckError(CeboMsrReadBlocking86(handle, vbuffer, buffer, frameCount));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadNonBlocking", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadNonBlocking86(uint handle, float[] vbuffer, int[] buffer, ref int transferred);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadNonBlocking", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadNonBlocking64(uint handle, float[] vbuffer, int[] buffer, ref int transferred);
        internal static int ReadNonBlocking(uint handle, float[] vbuffer, int[] buffer)
        {
            int transferred = 0;
            if (Is64)
                CheckError(CeboMsrReadNonBlocking64(handle, vbuffer, buffer, ref transferred));
            else
                CheckError(CeboMsrReadNonBlocking86(handle, vbuffer, buffer, ref transferred));
            return transferred;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadDigitalPort", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadDigitalPort86(uint handle, uint ioId, ref int value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadDigitalPort", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadDigitalPort64(uint handle, uint ioId, ref int value);
        internal static int ReadDigitalPort(uint handle, uint ioId)
        {
            int value = 0;
            if (Is64)
                CheckError(CeboMsrReadDigitalPort64(handle, ioId, ref value));
            else
                CheckError(CeboMsrReadDigitalPort86(handle, ioId, ref value));
            return value;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadAnalogInput", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadAnalogInput86(uint handle, uint ioId, ref float value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadAnalogInput", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadAnalogInput64(uint handle, uint ioId, ref float value);
        internal static float ReadAnalogInput(uint handle, uint ioId)
        {
            float value = 0;
            if (Is64)
                CheckError(CeboMsrReadAnalogInput64(handle, ioId, ref value));
            else
                CheckError(CeboMsrReadAnalogInput86(handle, ioId, ref value));
            return value;
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadFrame86(uint handle, float[] vbuffer, int[] buffer);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadFrame64(uint handle, float[] vbuffer, int[] buffer);
        internal static void ReadFrame(uint handle, float[] vbuffer, int[] buffer)
        {
            if (Is64)
                CheckError(CeboMsrReadFrame64(handle, vbuffer, buffer));
            else
                CheckError(CeboMsrReadFrame86(handle, vbuffer, buffer));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrReadCounter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadCounter86(uint handle, uint ioId, ref long value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrReadCounter", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrReadCounter64(uint handle, uint ioId, ref long value);
        internal static long ReadCounter(uint handle, uint ioId)
        {
            long value = 0;
            if (Is64)
                CheckError(CeboMsrReadCounter64(handle, ioId, ref value));
            else
                CheckError(CeboMsrReadCounter86(handle, ioId, ref value));
            return value;
        }

        /// Output specific.
        [DllImport(DLLx86, EntryPoint = "CeboMsrSetupOutputFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetupOutputFrame86(uint handle, uint[] ios, int count);
        [DllImport(DLLx64, EntryPoint = "CeboMsrSetupOutputFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrSetupOutputFrame64(uint handle, uint[] ios, int count);
        internal static void SetupOutputFrame(uint handle, uint[] ios)
        {
            if (Is64)
                CheckError(CeboMsrSetupOutputFrame64(handle, ios, ios.Length));
            else
                CheckError(CeboMsrSetupOutputFrame86(handle, ios, ios.Length));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrWriteDigitalPort", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteDigitalPort86(uint handle, uint ioId, int value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrWriteDigitalPort", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteDigitalPort64(uint handle, uint ioId, int value);
        internal static void WriteDigitalPort(uint handle, uint ioId, int value)
        {
            if (Is64)
                CheckError(CeboMsrWriteDigitalPort64(handle, ioId, value));
            else
                CheckError(CeboMsrWriteDigitalPort86(handle, ioId, value));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrWriteAnalogOutput", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteAnalogOutput86(uint handle, uint ioId, float value);
        [DllImport(DLLx64, EntryPoint = "CeboMsrWriteAnalogOutput", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteAnalogOutput64(uint handle, uint ioId, float value);
        internal static void WriteAnalogOutput(uint handle, uint ioId, float value)
        {
            if (Is64)
                CheckError(CeboMsrWriteAnalogOutput64(handle, ioId, value));
            else
                CheckError(CeboMsrWriteAnalogOutput86(handle, ioId, value));
        }

        [DllImport(DLLx86, EntryPoint = "CeboMsrWriteFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteFrame86(uint handle, float[] vbuffer, int[] buffer);
        [DllImport(DLLx64, EntryPoint = "CeboMsrWriteFrame", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
        private static extern uint CeboMsrWriteFrame64(uint handle, float[] vbuffer, int[] buffer);
        internal static void WriteFrame(uint handle, float[] vbuffer, int[] buffer)
        {
            if (Is64)
                CheckError(CeboMsrWriteFrame64(handle, vbuffer, buffer));
            else
                CheckError(CeboMsrWriteFrame86(handle, vbuffer, buffer));
        }
    }
}
